version: '3'
services:
  web:
    image: langgenius/dify-web:0.6.12
    restart: always
    environment:
      CONSOLE_API_URL: ''
      APP_API_URL: ''
      SENTRY_DSN: ''

#  db:
#    image: postgres:15-alpine
#    restart: always
#    environment:
#      PGUSER: postgres
#      POSTGRES_PASSWORD: difyai123456
#      POSTGRES_DB: dify
#      PGDATA: /var/lib/postgresql/data/pgdata
#    volumes:
#      - ./volumes/db/data:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 1s
#      timeout: 3s
#      retries: 30
#
#  redis:
#    image: redis:6-alpine
#    restart: always
#    volumes:
#      - ./volumes/redis/data:/data
#    command: redis-server --requirepass difyai123456
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]

#  weaviate:
#    image: semitechnologies/weaviate:1.19.0
#    restart: always
#    volumes:
#      - ./volumes/weaviate:/var/lib/weaviate
#    environment:
#      QUERY_DEFAULTS_LIMIT: 25
#      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
#      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
#      DEFAULT_VECTORIZER_MODULE: 'none'
#      CLUSTER_HOSTNAME: 'node1'
#      AUTHENTICATION_APIKEY_ENABLED: 'true'
#      AUTHENTICATION_APIKEY_ALLOWED_KEYS: 'WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih'
#      AUTHENTICATION_APIKEY_USERS: 'hello@dify.ai'
#      AUTHORIZATION_ADMINLIST_ENABLED: 'true'
#      AUTHORIZATION_ADMINLIST_USERS: 'hello@dify.ai'
#
#  sandbox:
#    image: langgenius/dify-sandbox:0.2.1
#    restart: always
#    environment:
#      API_KEY: dify-sandbox
#      GIN_MODE: 'release'
#      WORKER_TIMEOUT: 15
#      ENABLE_NETWORK: 'true'
#      HTTP_PROXY: 'http://ssrf_proxy:3128'
#      HTTPS_PROXY: 'http://ssrf_proxy:3128'
#      SANDBOX_PORT: 8194
#    volumes:
#      - ./volumes/sandbox/dependencies:/dependencies
#    networks:
#      - ssrf_proxy_network
#
#  ssrf_proxy:
#    image: ubuntu/squid:latest
#    restart: always
#    volumes:
#      - ./volumes/ssrf_proxy/squid.conf:/etc/squid/squid.conf
#    networks:
#      - ssrf_proxy_network
#      - default
#
#  nginx:
#    image: nginx:latest
#    restart: always
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
#      - ./nginx/conf.d:/etc/nginx/conf.d
#    depends_on:
#      - api
#      - web
#    ports:
#      - "80:80"
networks:
  ssrf_proxy_network:
    driver: bridge
    internal: true

volumes:
  storage-mogamindify:
